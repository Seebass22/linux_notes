* general
** return multiple items
   #+begin_src python
     def rotateRight(x, y):
	 return y, -x

     x, y = rotateRight(x, y)
   #+end_src

** convert to binary
   #+begin_src python
     bin(3)
   #+end_src

** convert binary to int
   #+begin_src python
     b = '1011'
     int(b, 2)
   #+end_src

** list comprehensions (listcomps)
   #+begin_src python
     # quickly fill a list
     lst = [5, 1, 4, 9]
     l = [func(x) for x in lst]
   #+end_src

** use a list comprehension as cartesian product
   #+begin_src python
     colors = ['black', 'white']
     sizes = ['S', 'M', 'L']
     shirts = [(color, size) for color in colors
                             for size in sizes]
   #+end_src

** get type of object
   #+begin_src python
     type(obj)
   #+end_src

** get random element from sequence
   #+begin_src python
     import random
     objs = ['a', 'asdf', 'jkl', 'hmm']
     rand = random.choice(objs)
   #+end_src

** count all occurrences in hashable (quicker than calling =.count()= multiple times)
   #+begin_src python
     word = "mississippi"
     c = Counter(word)
     c['s']
     # => 4
   #+end_src

* lists
** slicing
   - [start:stop:step]
   - stop does not include the element at which it stops
     #+begin_src python
       a = [0, 1, 2, 3, 4, 5]
       a[1:3] # => [1, 2]
     #+end_src

     | negative indices  | -4 | -3 | -2 | -1 |
     | sequence elements |  A |  B |  C |  D |
     | positive indices  |  0 |  1 |  2 |  3 |

** copy list (does not deep-copy contained lists)
   #+begin_src python
     b = a.copy()
   #+end_src

** deep-copying
   #+begin_src python
     import copy
     b = copy.deepcopy(a)
   #+end_src
   
** destructuring
   - also works for tuples
   #+begin_src python
     l = [1, 2, 3]
     a, b, c = l

     s = "forward 5"
     command, value = s.split()
   #+end_src
   
** count occurrences of item
   #+begin_src python
     [1, 2, 3, 4, 1, 4, 1].count(1)
     # => 3
   #+end_src
   
** filter out values
   #+begin_src python
     l = [1, 2, 3, 4, 1, 4, 1]
     # filter to values > 2
     list(filter(l, lambda x: x > 2))
     # or
     [item for item in l if item > 2]
   #+end_src

* iterators
** zip
   - iterate over combination of items from any number of iterables, yielding tuples
   - stops when one input is exhausted
#+begin_src python
  a = [1, 2, 3, 4]
  b = ['red', 'green', 'blue']

  for num, color in zip(a, b):
      print(f'{num}, {color}')

#+end_src

* paths and file operations
  #+begin_src python
  from pathlib import Path
  #+end_src
** get home dir path (as path object), works on every OS
   #+begin_src python
     home = Path.home()
   #+end_src

** convert path to string
   #+begin_src python
     str(home)
   #+end_src

** create child paths
   #+begin_src python
     game_dir = home / 'Downloads/games'
   #+end_src

** create folder with all parents, do not error if exists
   #+begin_src python
     game_dir.mkdir(parents=True, exist_ok=True)
   #+end_src

** check if file exists
   #+begin_src python
     game_dir.exists()
   #+end_src

** check if file is directory
   #+begin_src python
     game_dir.is_dir()
   #+end_src

** delete file, do not error if file does not exist
   #+begin_src python
     out_file.unlink(missing_ok=True)
   #+end_src

* dictionaries
** iterate over dictionary key, value pairs
   #+begin_src python
     for key, value in d.items():
   #+end_src
** Counter dict
#+begin_src python
  from collections import Counter

  iterable = "collection"

  c = Counter(iterable)
  # {'c': 2, 'o': 2, 'l': 2, 'e': 1, 't': 1, 'i': 1, 'n': 1}
#+end_src

* classes
  #+begin_src python
    Class dog():
	  #class variable shared by all instances
	  kind = 'canine'

	  # constructor (with default parameter)
	  def __init__(self, name, age=5):
		# initialize data attributes (member variables)
		# unique to each instance
		self.name = name
		self.age = age

	  def sit(self):
		print(f'{self.name} is now sitting.')
  #+end_src

** data attributes spring in to existence when they're assigned to
   #+begin_src python
     x = dog()
     x.is_friend = True
     print(x.is_friend)
   #+end_src

* file io
** open file for reading only
   # creates file if does not exist, replaces content of existing file
   #+begin_src python
     f = open('filename.txt', 'r')
   #+end_src
** or call open on a path object
   #+begin_src python
     f = file_path.open('r')
   #+end_src

** open for both read and write
   #+begin_src python
     f = open('filename.txt', 'r+')
   #+end_src

** read file to string
   #+begin_src python
     text = f.read()
   #+end_src

** read lines of file to list of strings
   #+begin_src python
     line_list = f.readlines()
   #+end_src

** close file
   #+begin_src python
     f.close()
   #+end_src
** automatically close file
   #+begin_src python
     with open('file.txt') as f:
	 data = f.read()
   #+end_src

* strings
** int to string
   #+begin_src python
     str(42)
   #+end_src

** split string into list
   default separator is any whitespace
   #+begin_src python
     txt = "one two three four"
     txt2 = "one#two#three#four"

     x = txt.split()
     x2 = txt.split("#")
     # result ['one', 'two', 'three', 'four']

     s = "forward 5"
     command, value = s.split()
   #+end_src

** raw string literals
   # treat backslash literally (no escapes, other than terminating quotes)
   #+begin_src python
     r'your string here'
   #+end_src

** split string of numbers into list of ints
   #+begin_src python
     A = '1, 2, 3, 4'
     B = [int(x) for x in A.split(',')]
     # result: [1, 2, 3, 4]
   #+end_src

** print format string
   #+begin_src python
     r = 5
     c = 2
     print('nr of rows:{rows}, nr of columns:{columns}'.format(rows=r, columns=c))
     # or
     print('nr of rows:{rows}, nr of columns:{columns}'.format(r, c))
     # or
     print(f'nr of rows:{rows}, nr of columns:{columns}')
   #+end_src
   - to escape brackets, write 2 brackets

** strip characters from end of string
   # strip newlines from string (does not cause error if no nl in string)
   #+begin_src python
     a = 'asdf\n'
     a.rstrip('\n')
   #+end_src
** strip something from left of string
   #+begin_src python
     lstrip
   #+end_src
** rstrip and lstrip remove all combinations of supplied characters
   # the characters are not a suffix string! for example:
   #+begin_src python
     a = 'magenta bags'
     a.rstrip(' bags')
     # => magent
   #+end_src
** strip leading and trailing whitespace
   #+begin_src perl
     a = " magenta bags \n"
     s.strip()
     # => magenta bags
   #+end_src

* time and date
  #+begin_src python
    import time
    import datetime
  #+end_src

** get unix time in seconds (as float)
   #+begin_src python
     time.time()
   #+end_src

** get current date and time
   #+begin_src python
     x = datetime.datetime.now()
   #+end_src

** add/subtract dates (ignores timezones, can cause errors around DST transitions)
   #+begin_src python
     x += datetime.timedelta(days=5, hours=-3)
   #+end_src

** format datetime to string
   #+begin_src python
     x.strftime('%Y-%m-%d')
   #+end_src

* json
** load json file as dictionary
   #+begin_src python
     with open('example.json', 'r') as infile:
	 a = json.load(infile)
   #+end_src

** write python object to json file
   #+begin_src python
     with open('example.json', 'w') as output:
	 json.dump(a, output, indent=4)
   #+end_src

* argument parsing
  #+begin_src python
    import argparse
    parser = argparse.ArgumentParser()
  #+end_src
** add arguments
   #+begin_src python
     args = parser.parse_args()
   #+end_src

** add positional argument "start", set help text
   #+begin_src python
     parser.add_argument("echo", help="thing to echo")
   #+end_src

** optional argument
   #+begin_src python
     parser.add_argument("--verbose", help="display verbose output")
   #+end_src

** set variable to true if argument exists
   #+begin_src python
     parser.add_argument("--verbose", action="store_true")
     if args.verbose:
	 print("verbose output enabled")
   #+end_src

** short and long options
   #+begin_src python
     parser.add_argument("-v", "--verbose")
   #+end_src

** argument with optional parameter, const on empty
   # set name of parameter in usage message
   #+begin_src python
     parser.add_argument('--start', nargs='?', const='', metavar='activity')
   #+end_src

** restrict to int, 3 choices
   #+begin_src python
     parser.add_argument("-v", "--verbosity", type=int, choices=[0, 1, 2])
   #+end_src

** count argument, for example "-v" x3 = "-vvv", default value 0 (if arg not used)
   #+begin_src python
     parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")
     print(args.verbosity)
   #+end_src

* regular expressions (regex)
  #+begin_src python
    string = "*49ffd2xxx"
  #+end_src
** match string
   #+begin_src python
     re.match(r'*[0-9a-f]{6}', string)
   #+end_src
** match whole string
   #+begin_src python
     re.fullmatch(r'*[0-9a-f]{6}', string)
   #+end_src
** return list of all matches
   #+begin_src python
     re.findall(r'\d+', string)
   #+end_src

** split string by occurences of pattern
   # (do not include delimiter pattern)
   #+begin_src python
     re.split(r'\d+', string)
   #+end_src
** (include delimiter)
   #+begin_src python
     re.split(r'(\d+)', string)
   #+end_src

* unit tests (pytest)
** create filename starting with test_
   #+begin_src sh
     vi test_add.py
   #+end_src

** create functions starting with test_
   #+begin_src python
     def test_addition():
	 expected = 5
	 result = cut.add(2, 3)

	 # verify with asserts
	 assert result == expected, "result of addition incorrect"
   #+end_src

** run tests
   #+begin_src sh
     python -m pytest
   #+end_src

** fixtures
   - fixtures are called when passed as arguments to test functions
     #+begin_src python
       @pytest.fixture
       def current_date():
	   return datetime.datetime.now().strftime('%Y-%m-%d')
     #+end_src

** clean up with fixture
   - code before yield performs setup
   - code after yield runs on exit
     #+begin_src python
       @pytest.fixture
       def setup():
	   _driver = Chrome()
	   timestamp = time.time()
	   yield _driver, timestamp
	   _driver.quit()
     #+end_src

** parameterize test
   #+begin_src python
     TEST_DATA = [
	 (15, '15s'),
	 (66, '1m 6s'),
	 (3635, '1h 0m 35s'),
     ]

     @pytest.mark.parametrize('seconds,expected', TEST_TO_TIME_STRING_DATA)
     def test_to_time_string(seconds, expected):
	 result = history.to_time_string(seconds)
	 assert result == expected
   #+end_src

* virtual environments
** creating a virtual environment
   #+begin_src shell
     python3 -m venv /path/to/new/virtual/environment
   #+end_src
** activate virtual environment
   #+begin_src shell
     source <venv>/bin/activate
   #+end_src
** deactivate virtual environment
   #+begin_src shell
     deactivate
   #+end_src

* built in modules
** simple http server
   - hosts content of current directory
   #+begin_src sh
     python3 -m http.server
   #+end_src

* additional tools
** PEP8 code style checker
   pycodestyle
