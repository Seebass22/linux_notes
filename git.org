* LOG
** FORMATTING
*** simple log
    #+begin_src shell
      git log --oneline
    #+end_src

*** only show changed files
    #+begin_src shell
      git log --name-only
    #+end_src

*** show diffstat (no. of changed lines per file) for every commit
    #+begin_src shell
      git log --stat
    #+end_src

*** group commits by author
    #+begin_src shell
      git shortlog
    #+end_src

** FILTERING
*** latest 3 commits
    #+begin_src shell
      git log -3
    #+end_src

*** after or before date
    #+begin_src shell
      git log --before="2020-1-1"
    #+end_src

*** by author (accepts regex)
    #+begin_src shell
      git log --author="seb"
      git log --author="seb\|bob"
    #+end_src

*** by commit message
    #+begin_src shell
      git log --grep="UI"
    #+end_src

*** by file
    #+begin_src shell
      git log -- foo.py
    #+end_src

*** filter out all merge commits (or only show merges)
    #+begin_src shell
      git log --no-merges
      git log --merges
    #+end_src

* rebasing
  rewrite git history
** start interactive rebase
   #+begin_src shell
     git rebase -i <rev>
   #+end_src
** split a commit
   1. start an interactive rebase and select edit (in interactive rebase)
   2. at chosen commit: reset index
      #+begin_src shell
	git reset HEAD^
      #+end_src
   3. =git add= things
   4. commit
   5. repeat as many times as necessary
   6. continue/finish rebase
      #+begin_src shell
	git rebase --continue
      #+end_src

* MISC
** find commit that modifies particular line of code
   example: find all commits that modified/added/removed a line containing Debug.Log
   #+begin_src shell
     git log -S"Debug.Log"
   #+end_src

** add everything on root dir
   #+begin_src shell
     git add :/
   #+end_src

** remove file from index but not working tree
   #+begin_src shell
     git rm --cached <file>
   #+end_src

** undo last commit but keep changes (add --hard to discard changes)
   #+begin_src shell
     git reset HEAD~1
   #+end_src

** undo git reset (restore changes)
   #+begin_src shell
     git reflog
     git checkout <SHA>    and    git checkout -b <new branch name>
     # or
     git reset --hard <SHA>
   #+end_src

** find bug through binary search
   #+begin_src shell
     git bisect
   #+end_src

** rewrite history (change commit message, split commits, etc)
   example: [modify last 8 commits]
   #+begin_src shell
     git rebase -i HEAD~8
   #+end_src

** find commit where file was deleted
   #+begin_src shell
     git log --diff-filter=D -- path/to/file
   #+end_src
** checkout version at the commit before
   #+begin_src shell
     git checkout <deleting_commit>^ -- <file_path>
   #+end_src

** replay commit on current branch
   #+begin_src shell
     git cherry-pick <SHA>
   #+end_src

** ignore changes to tracked file locally
   #+begin_src shell
     git update-index --skip-worktree <file_path>
   #+end_src
*** list files that have --skip-worktree active
    #+begin_src shell
      git ls-files -v | grep '^S'
    #+end_src
*** revert --skip-worktree
    #+begin_src shell
      git update-index --no-skip-worktree <file_path>
    #+end_src

** abort merge after pulling
   clear editor window
   #+begin_src shell
     git merge --abort
   #+end_src

** check for whitespace errors or conflict markers
   #+begin_src shell
     git diff --check
   #+end_src
** diff staged files
   #+begin_src shell
     git diff --staged
   #+end_src

** local gitignore (not tracked)
   #+begin_src shell
     .git/info/exclude
   #+end_src

** create source tarball (prints to stdout by default)
   #+begin_src shell
     git archive <revision>

     # use tar.gz format
     git archive --format=tar.gz HEAD > source_code.tar.gz

     # output zip, infer output format by extension
     git archive -o latest.zip HEAD

     # create a zip that contains directory with source
     # this will only add files relative to directory it is run in, so run it from repo root 
     # --prefix=dirname/
     git archive --prefix=latest/ -o latest.zip HEAD
   #+end_src

** enable autocrlf for current repo
   #+begin_src shell
     git config --local core.autocrlf true
   #+end_src

** per-directory gitconfig
   #+begin_src
   [includeIf "gitdir:/home/seb/Documents/uni"]
       path = ~/.gitconfig_uni
   #+end_src
