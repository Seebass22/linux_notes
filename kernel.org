* C basics
** static functions
   - function with scope limited to its' object file
** goto (for error handling) 
   - use goto to avoid many nested if statements for cleanup
   #+begin_src c
     if (try_something_1 == Err)
         goto err1;

     if (try_something_2 == Err)
         goto err2;

     if (try_something_3 == Err)
         goto err3;

     err3:
         undo_try_something_2;
     err2:
         undo_try_something_1;
     err1:
         return ret;
   #+end_src

* sections
** header
   - only use kernel space headers
     #+begin_example
     linux/module.h
     #+end_example

** code
*** initialization
    #+begin_src c
      int fun_name(void);
    #+end_src
    - return 0 on success
    - return nonzero on initialization failed
    - called during boot for static module, or during module insertion for dynamic
    - exactly one initialization
      #+begin_src c
        static int __init my_kernel_module_init(void)
        {
            pr_info("Hello World !\n");
            return 0;
        }
      #+end_src

*** clean up
    #+begin_src c
      void fun_name(void);
    #+end_src
    - only called for dynamic modules
    - free memory
    - uninitialize devices
      #+begin_src c
        static void __exit my_kernel_module_exit(void)
        {
            pr_info("Good bye World\n");
        }
      #+end_src

** register
   macros to register functions
   #+begin_src c
     module_init(my_kernel_module_init);
     module_exit(my_kernel_module_exit);
   #+end_src

** module description macros
   #+begin_src c
     MODULE_LICENSE("GPL")
     MODULE_AUTHOR("ratthew")
     MODULE_DESCRIPTION("a kernel that prints hello world")
     MODULE_INFO(board, "beaglebone black")
   #+end_src

* MISC
** =__init= macro
   - only for static modules
   - frees memory for function after boot

** =__exit= macro
   - functions marked =__exit= will be dropped by build system

** =__user= macro
   - used with user level pointers
   - tells developer not to assume pointer is valid
   - never dereference user level pointers directly - use dedicated kernel functions like =copy_to_user= and =copy_from_user=

** =container_of()= macro
   - returns address of the containing structure
     #+begin_src c
       #define container_of(ptr, type, member)
     #+end_src
     - ptr - pointer to member
     - type - type of container struct
     - member - name of member that =ptr= refers to

** error handling
   #+begin_src c
     #include <linux/error.h>
   #+end_src
*** check if error pointer
    =IS_ERR()=
*** convert between pointer and error code
    - =PTR_ERR()= - pointer to error
    - =ERR_PTR()= - error code to pointer

** copy data between kernel space and user space
   - check if pointer is valid
   - only perform copy if valid
   - return amount of memory that could not be copied (or 0)
   - return -EFAULT on error
     #+begin_src c
       #include <linux/uaccess.h>
     #+end_src
*** copy to user space 
   #+begin_src c
     unsigned long copy_to_user(void __user *to, const void *from, unsigned long n);
   #+end_src
*** copy from user space
   #+begin_src c
     unsigned long copy_from_user(void *to, const void __user *from, unsigned long n);
   #+end_src

** error code 
   table found in =include/uapi/asm-generic/errno-base.h=

* printing
  read with dmesg
** =printk=
   works like printf
*** log levels
    #+begin_src c
      printk(KERN_WARNING "Hello this is kernel code\n");
    #+end_src
    - if kernel message log level is lower than current console log level,
      message is printed on console
    - current console log level is in =/proc/sys/kernel/printk=
*** wrappers 
    | name         | log level | alias function |
    | KERN_EMERG   | "0"       | pr_emerg       |
    | KERN_ALERT   | "1"       | pr_alert       |
    | KERN_CRIT    | "2"       | pr_crit        |
    | KERN_ERR     | "3"       | pr_err         |
    | KERN_WARNING | "4"       | pr_warning     |
    | KERN_NOTICE  | "5"       | pr_notice      |
    | KERN_INFO    | "6"       | pr_info        |
    | KERN_DEBUG   | "7"       | pr_debug       |
    | KERN_DEFAULT | ""        |                |

* building
** out of tree
   #+begin_src sh
     make -C $KDIR M=$PWD [targets]
   #+end_src
*** targets
**** modules 
     - default target
**** modules_install
     - install modules to =/lib/modules/<kernel_ver>/extra/=
     - change prefix with =INSTALL_MOD_PATH=
**** clean
     - remove all generated files in module dir
**** help
     - list available targets

*** local makefile
    - called by toplevel makefile
**** kbuild variable
     #+begin_src shell
       obj-<X> := <module_name>.o
     #+end_src
     X is
     - n, do not compile module
     - y, compile and link with kernel image
     - m, compile as dynamically loadable module

**** cross compilation makefile example
     #+begin_src shell
       obj-m := main.o
       ARCH=arm
       CROSS_COMPILE=arm-linux-gnueabihf-
       KERN_DIR=/home/seb22/Documents/LDD/source/linux_bbb_4.14/
       HOST_KERN_DIR = /lib/modules/$(shell uname -r)/build/

       all:
       make ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) -C $(KERN_DIR) M=$(PWD) modules

       clean:
       make ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) -C $(KERN_DIR) M=$(PWD) clean

       help:
       make ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) -C $(KERN_DIR) M=$(PWD) help

       host:
       make -C $(HOST_KERN_DIR) M=$(PWD) modules
     #+end_src

** in-tree
   1. create a folder in =drivers/char/=
   2. create Kconfig file
   3. add local Kconfig entry to upper level Kconfig
   4. create local Makefile
   5. add local makefile to higher level Makefile
*** Kconfig file 
    #+begin_example
      menu "my custom modules"
          config CUSTOM_HELLOWORLD
              tristate "hello world module support"
              default m
      endmenu
    #+end_example

* char device driver
** VFS data structures
*** struct inode
    - holds general information about a file
    - is written back to disk
**** initialization 
     1. =init_special_inode()= is called, where
     2. device number =i_rdev= is initialized
     3. file operations =i_fop= is initialized with default file operations =def_chr_fops=
*** struct file
    - tracks iteraction on an open file
*** struct cdev
    - holds pointer to file_ops
*** struct file_ops
    - holds pointers to functions for system calls (open, read, lseek, etc)

** register a range of char device drivers
   #+begin_src c
     int alloc_chrdev_region(dev_t *dev, unsigned baseminor,
                             unsigned count, const char *name);
   #+end_src
   example:
   #+begin_src c
     dev_t device_number;
     alloc_chrdev_region(&device_number, 0, 7, "eeprom");
   #+end_src
*** extract major or minor number from device number
    #+begin_src c
      #include <linux/kdev_t.h>

      dev_t device_number;
      int minor_no =  MINOR(device_number);
      int major_no =  MAJOR(device_number);
    #+end_src
*** create dev_t from major and minor numbers
    #+begin_src c
      MKDEV(int major, int minor);
    #+end_src

** initialize cdev structure
   #+begin_src c
     void cdev_init(struct cdev *cdev, const struct file_operations *fops);
   #+end_src

** add char devices to kernel VFS
   #+begin_src c
     int cdev_add(struct cdev *p, dev_t dev, unsigned count);
   #+end_src
   
** create a directory in sysfs
   - creates directory =/sys/class/<class_name>=
     #+begin_src c
       struct class *class_create(struct module *owner, const char *name);
     #+end_src
   
** crate a subdir with device name
   - creates subdirectory in =/sys/class/<class_name>=
   - populates sysfs entry with dev file consisting of major & minor numbers, separated by =:= character
     #+begin_src c
       struct device *device_create(struct class *class, struct device *parent,
                                    dev_t devt, void *drvdata, const char *fmt...);
     #+end_src
     - class - pointer to class that device should be registered to
     - parent - pointer to parent of device (if exists)
     - dev_t - device number (from =alloc_chrdev_region()=)
     - drvdata - private data
     - fmt - device name string

** cleanup
   #+begin_src c
     // remove device created with device_create()
     void device_destroy(struct class *class, dev_t devt);

     // destroy class
     void class_destroy(struct class *cls);

     // remove cdev registration from VFS
     void cdev_del(struct cdev *p);

     // unregister a range of device numbers
     void unregister_chrdev_region(dev_t from, unsigned count);
   #+end_src
   
* syscalls to implement
  see manpages
** open 
   - initialize device
   - detect device initialization erros
   - check permission (O_RDONLY, O_WRONLY, O_RDWR)
   - identify device being opened with minor number
   #+begin_src c
     int pcd_open(struct inode *inode, struct file *filp);
   #+end_src

** close
   - releases file object
   - called when last reference to open file is closed (when =f_count= field becomes 0)
     #+begin_src c
       int pcd_release(struct inode *inode, struct file *filp);
     #+end_src

** read 
   - read =count= bytes from device, starting at position =f_pos=
   - add number of bytes successfully read to =f_pos=
   - return number of bytes successfully read or 0 if EOF
   - return error code on error
   #+begin_src c
     ssize_t pcd_read(struct file *filp, char __user *buff, size_t count, loff_t *f_pos);
   #+end_src
   
** write
   - write =count= bytes into device starting at position =f_pos=
   - add number of bytes successfully written to =f_pos=
   - return number of bytes successfully written
   - return error code on error
   #+begin_src c
     ssize_t pcd_write(struct file *filp, const char __user *buff, size_t count, loff_t *fpos);
   #+end_src
   
** lseek
   - move offset
   - whence:
     - SEEK_SET - set offset to =off= bytes
     - SEEK_CUR - set offset to current offset + =off= bytes
     - SEEK_END - set offset to size of file + =off= bytes
   #+begin_src c
     loff_t pcd_lseek(struct file *filp, loff_t off, int whence);
   #+end_src

* print info for module
  #+begin_src shell
    modinfo main.ko
  #+end_src
