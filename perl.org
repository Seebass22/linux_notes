* functions
** parameters
*** with shifting
   #+begin_src perl
     do_something("a", "b");

     sub do_something {
         my $one = shift;
         my $two = shift;

         print $one, $two, "\n";
     }
   #+end_src
*** alternative
   #+begin_src perl
     # same as
     sub do_something {
         my ($one, $two) = @_;

         print $one, $two, "\n";
     }
   #+end_src

* strings
** concatenate
   #+begin_src perl
     my $str = "hello";
     $str .= " ";
     $str .= "world";
   #+end_src
** interpolate
   #+begin_src perl
     my $val = 5;
     my $str = "I have $val apples";

     # use single quotes to avoid interpolation
     my $str2 = '$val does not interpolate here'
   #+end_src

* arrays
  #+begin_src perl
    my @arr = qw(one two three);
  #+end_src
** shift, unshift
   remove, add elements from start
   #+begin_src perl
     my $val = shift @arr;

     unshift @arr, $val;
   #+end_src
** pop, push
   remove, add elements from end
   #+begin_src perl
     push @arr, 5;

     my $val = pop @arr;
   #+end_src

* hashes
  #+begin_src perl
    my %hash = ( key => "value",
                 key2 => "value" );

    print $hash{value};

    my $ref = \%hash;
    print $ref->{value};
  #+end_src

* nested data structures
  use references
  #+begin_src perl
    my @arr = ( 1, 4, 7 );
    my %hash = ( first => "asdf",
                 second => \@arr);

    my %nested = ( first => \@arr,
                   second => \%hash);

  #+end_src

* running shell programs
  #+begin_src perl
    `uname -a`
  #+end_src
** pipe to/from shell program
*** read from program
   #+begin_src perl
     $pid = open $readme, "-|", "program", "arguments" or die "Couldn't fork: $!\n";
   #+end_src
*** write to program
   #+begin_src perl
     $pid = open $readme, "|-", "program", "arguments" or die "Couldn't fork: $!\n";
   #+end_src
   
   #+begin_src perl
     $pid = open $writeme, "|-", "dot", "-Tsvg", "-o", "out.svg" or die "couldn't fork: $!\n";
     print $writeme $str;
     close $writeme;
   #+end_src
