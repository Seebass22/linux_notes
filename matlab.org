* BASIC OPERATIONS
** Vectors
   #+begin_src octave
     A = [1 2 3 4 5];
     B = [9 7 5 3 1];
     C = [2 4];
   #+end_src

** matrices
   #+begin_src octave
     D_m = [2 5 2
	    1 2 3
	    4 2 5];

     E_m = [4 5 5; 5 2 4];
   #+end_src

** scalar variables
   #+begin_src octave
     f = 5;
   #+end_src

** complex numbers
   #+begin_src octave
     z = 2 + 4i;
     zz = 1 + 5i;
   #+end_src

** struct
   #+begin_src octave
     person.name = 'bob';
     person.age = 55;
   #+end_src

** sum vector
   #+begin_src octave
     sum(A)
   #+end_src

** dotproduct (skalarprodukt)
   #+begin_src octave
     dot(A,B)
   #+end_src

** matrixmultiplication, inversion
   #+begin_src octave
     D_m * inv(D_M)
   #+end_src

** absolute value (betrag)
   #+begin_src octave
     abs(z)
   #+end_src

** transpose matrix
   #+begin_src octave
     D_m'
   #+end_src

** powers (potenzen)
   #+begin_src octave
     f^2
   #+end_src
** multiply square matrix with itself
   #+begin_src octave
     D_m^2
   #+end_src

** element-wise exponentiation
   #+begin_src octave
     D_m.^2
   #+end_src

** square root
   #+begin_src octave
     sqrt(f)
   #+end_src
   
** element-wise
   #+begin_src octave
     sqrt(A)
     sqrt(D_m)
   #+end_src

** indexing (y, x)
   #+begin_src octave
     A(2)        % 2
     D_m(3, 1)   % 4
     D_m(2:3, 3) % row 2-3, column 3
     D_m(:, 1:2) % all rows, columns 1-2
   #+end_src

** generate evenly space points
   #+begin_src octave
     % generate points from 0 to 2pi with steps of 0.01
     x = start:step:end

     % generate 100 evenly spaced points between x1 and x1
     x = linspace(x1, x2)

     % generate n evenly spaced points between x1 and x1
     x = linspace(x1, x2, n)
   #+end_src

** get matrix/array dimensions
   #+begin_src octave
     size(A)
   #+end_src

** get number of array elements (length)
   #+begin_src octave
     numel(A)
   #+end_src

** reshape array/matrix
   #+begin_src octave
     % to have 2 colmuns
     reshape(Arr, [], 2)

     % to have 4 rows
     reshape(Arr, 4, [])
   #+end_src

** get max (or min) in array
   #+begin_src octave
     max(A)
   #+end_src
** get max (or min) and index in array
   #+begin_src octave
     [max_size, max_index] = max(A)
   #+end_src
** get max (or min) in matrix
   #+begin_src octave
     max(max(M))
				     # or
     max(M(:))
   #+end_src

** sort rows of matrix, table or cell array
   #+begin_src octave
     sortrows(A)
   #+end_src
** sort by column 2
   #+begin_src octave
     sortrows(A, [2])
   #+end_src
** sort by column 2, then 4
   #+begin_src octave
     sortrows(A, [2, 4])
   #+end_src

** get data type of variable
   #+begin_src octave
     class(A)
   #+end_src

** print variable (incl. strings)
   #+begin_src octave
     disp(A)
   #+end_src

** time things
   #+begin_src octave
     tic
     toc
   #+end_src

** run script
   #+begin_src octave
     <name of script without .m>
   #+end_src

* STRINGS
** convert int to string
   #+begin_src octave
     chr = int2str(N);
   #+end_src

** concatenate string
   #+begin_src octave
     filename = strcat('img_', int2str(i), '.ppm');
   #+end_src

* FILE IO
** create a folder
   #+begin_src octave
     mkdir('pics');
   #+end_src

* CELL ARRAYS

** create cell array
   #+begin_src octave
     c = {}
     c = {1, [1 2 3], 'bob', true}
   #+end_src

** access cell 1
   #+begin_src octave
     c(1)
   #+end_src
** access contents of cell 1
   #+begin_src octave
     c{1}
   #+end_src

** delete cell 1
   #+begin_src octave
     c(1) = []
   #+end_src
** delete contents of cell 1 -> empty cell
   #+begin_src octave
     c{1} = []
   #+end_src

** convert cell array to array
   #+begin_src octave
     a = cell2mat(b)
   #+end_src

** convert binary to decimal
   #+begin_src octave
     a = '1011'
     bin2dec(a)
   #+end_src

** convert decimal to binary
   optional: specify minimum number of digits
   #+begin_src octave
     dec2bin(a, 8)
   #+end_src

* LOOPS AND CONDITIONALS
** for loop
   #+begin_src octave
     for n = 2:6
       % do something
     end
   #+end_src

** while loop
   #+begin_src octave
     while n > 1
       % do something
       n = n - 1;
     end
   #+end_src

** exit a loop
   #+begin_src octave
     break
   #+end_src
** skip to next iteration
   #+begin_src octave
     continue
   #+end_src

** if, else statement
   #+begin_src octave
     if expression && expression
       % statements
     elseif expression
       % statements
     else
       % statements
     end
   #+end_src

** equality
   #+begin_src octave
     ==
   #+end_src
** inequality
   #+begin_src octave
     ~=
   #+end_src

** determine if variable has specified data type
   #+begin_src octave
     isa(A, 'double')
   #+end_src

* PLOTS

** multiple plot windows
   #+begin_src octave
     figure(1)
     plot(...)
     figure(2)
     plot(...)
   #+end_src

** multiple plots in one window
*** m-by-n grid, position = index of next plot
    #+begin_src octave
      subplot(m, n, position)
    #+end_src

** plot and label
   #+begin_src octave
     plot(x, y)
     xlabel('x')
     ylabel('sin(x)')
   #+end_src

** enable grid
   #+begin_src octave
     grid on
   #+end_src

*** legend
    #+begin_src octave
      legend('sin')
    #+end_src

*** overlay more plots
    #+begin_src octave
      hold on
    #+end_src
*** stop overlay
    #+begin_src octave
      hold off
    #+end_src

** polynomial curve fitting
**** return coefficients of polynomial p(x) of degree n
     #+begin_src octave
       p = polyfit(x, y, n)
     #+end_src
**** return values of polynomial p at each point in x
     #+begin_src octave
       vals = polyval(p,x)
     #+end_src
**** plot
     #+begin_src octave
       plot(x, vals)
     #+end_src

* IMAGES
  #+begin_src octave
    pkg load image
  #+end_src

** read image
   #+begin_src octave
     img = imread('pic1.ppm')
   #+end_src

** convert to grayscale
   #+begin_src octave
     g_img = rgb2gray(img)
   #+end_src

** calculate histogram, return counts and bin locations
   #+begin_src octave
     [counts, binLocations] = imhist(g_img)
   #+end_src
** display histogram
   #+begin_src octave
     imhist(g_img)
   #+end_src

** write image to file
   #+begin_src octave
     imwrite(data, filename)
   #+end_src

* FUNCTIONS
  #+begin_src octave
    function e = entropy_(d)
      e = sum(d.*log2(1./d));
    end
  #+end_src

** nested functions
   - both nested and the containing function can access variables declared in either

* GLOBAL VARIABLES
  - must be declared in any function using them
    #+BEGIN_SRC octave
      global x = 5;
      function n func
	global x
	n = x + 2;
      end
    #+END_SRC

** check if argument has been set (for optional arguments)
   #+begin_src octave
     function f(opt)
       if (exist('opt', 'var'))
				     % do something
       end
     end
   #+end_src

* CONTROL SYSTEMS
  #+begin_src octave
    pkg load control

    s = tf('s');
    Gs = 10^9 / ((s + 20)*(s + 500))
  #+end_src

** calculate phase and magnitude at frequency wc
   (magnitude not in dB)
   #+begin_src octave
     [mag phase] = bode(Gs, wc)
   #+end_src
** convert to dB
   #+begin_src octave
     mag = 20 * log10(mag)
   #+end_src

** bode plot
   from frequency 1 to 100000
   #+begin_src octave
     bode(Gs, {1, 100000})
   #+end_src

** bode plot with phase margin
   #+begin_src octave
     margin(Gs)
   #+end_src

** calculate phase margin and omega_c
   #+begin_src octave
     [ignore, marg, ignore2, wc] = margin(Gs)
   #+end_src

** step response
   #+begin_src octave
     step(Gs)
   #+end_src

* MISC

** sort array of structs based on value of struct member
   #+BEGIN_SRC octave
     cells = struct2cell(struct_array);
     sortvals = cells(2,1,:);
     mat = cell2mat(sortvals);
     mat = squeeze(mat);
     [sorted, ix] = sort(mat, 'descend');
     struct_array = struct_array(ix);
   #+END_SRC
